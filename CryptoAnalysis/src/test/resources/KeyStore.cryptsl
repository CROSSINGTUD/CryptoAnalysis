SPEC java.security.KeyStore 
OBJECTS
    java.io.InputStream fileinput;
    
    char[] passwordIn;
    char[] passwordOut;
    char[] passwordKey;
    
    byte[] entry;
    byte[] byteKey;
    
    java.security.KeyStore.LoadStoreParameter paramLoad;
    java.security.KeyStore.ProtectionParameter protParamGet;
    java.security.KeyStore.ProtectionParameter protParamSet;
    java.lang.String aliasGet;
    java.lang.String aliasSet;
    java.io.OutputStream fileoutput;
    java.security.KeyStore.LoadStoreParameter paramStore;
    java.lang.String keyStoreAlg;
    java.security.cert.Certificate[] chain;
    java.security.cert.Certificate cert;
    
    java.security.Key key;
    java.lang.String alias;
    
EVENTS
    g1: getInstance(keyStoreAlg);
    g2: getInstance(keyStoreAlg, _);
    Gets := g1 | g2;

    l1: load(fileinput, passwordIn);
    l2: load(paramLoad);
    Loads := l1 | l2;

    s1:store(paramStore);
    s2:store(fileoutput, passwordOut);
    Stores := s1 | s2;

    gE: getEntry(aliasGet, protParamGet);
    sE: setEntry(aliasSet, entry, protParamSet);
    scE: setCertificateEntry(alias, cert);
    skE1: setKeyEntry(alias, byteKey, chain);
    skE2: setKeyEntry(alias, key, passwordKey, chain);
    
    Entries := gE | sE | scE | skE1 | skE2;
    
    gk: key = getKey(alias, passwordKey);

ORDER
    Gets, Loads, ((gE?, gk) | (sE, Stores))*

CONSTRAINTS
    neverTypeOf(passwordIn, java.lang.String) ;
    neverTypeOf(passwordOut, java.lang.String) ;
    neverTypeOf(passwordKey, java.lang.String) ;

ENSURES
	generatedKeyStore[this] after Loads;
	generatedKey[key, _];
	generatedPrivkey[key];
	generatedPubkey[key];