SPEC javax.crypto.SecretKeyFactory
OBJECTS
    java.lang.String algorithm;
    javax.crypto.SecretKey key;
    javax.crypto.SecretKey otherKey;
    java.security.spec.KeySpec keySpec;
    int keylength;
   
EVENTS
    g1: getInstance(algorithm);
    g2: getInstance(algorithm, _);
    Gets := g1 | g2;

    gS: key = generateSecret(keySpec);
    tK: key = translateKey(otherKey);
    
    Gens := gS | tK;

ORDER
    Gets, Gens

CONSTRAINTS
	algorithm in {"PBEWithHmacSHA512AndAES_128","PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBKDF2WithHmacSHA224", "PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA384", "PBKDF2WithHmacSHA512",
				  "PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128","PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"};
	algorithm in {"PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128", "PBEWithHmacSHA512AndAES_128"} => keylength in {128};
	algorithm in {"PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"} => keylength in {256};
	algorithm in {"PBKDF2WithHmacSHA224", "PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA384", "PBKDF2WithHmacSHA512"} => keylength in {128, 192, 256};

REQUIRES
	speccedKey[keySpec, _];
ENSURES
    generatedKey[key, algorithm];