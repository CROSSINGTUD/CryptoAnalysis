SPEC javax.net.ssl.SSLEngine

/*
 *  When using raw SSLSocket and SSLEngine classes, 
 *  you should always check the peer's credentials
 *  before sending any data. The SSLSocket and SSLEngine 
 *  classes do not automatically verify that the host name
 *  in a URL matches the host name in the peer's credentials.
 *  An application could be exploited with URL spoofing if
 *  the host name is not verified. Since JDK 7, endpoint 
 *  identification/verification procedures can be handled 
 *  during SSL/TLS handshaking. See the SSLParameters.getEndpointIdentificationAlgorithm method.
 */

OBJECTS
	java.lang.String[] ciphersuites;
	java.lang.String[] protocols;
EVENTS
	
	c1: SSLEngine();
	c2: SSLEngine(_,_);
	Con := c1 | c2;

	ec: setEnabledCipherSuites(ciphersuites);
	SetEnabledCipherSuites := ec;
	
	ep: setEnabledProtocols(protocols);
	SetEnabledProtocols := ep;
	
	
	/*	dependent on purpose of the SSLEngine obj (Client || Server)
	 *  serverEngine.setUseClientMode(false);
     *  serverEngine.setNeedClientAuth(true);
	 */
	
ORDER
	Con, (ec,ep) | (ep,ec) 

CONSTRAINTS
	elements(protocols) in {"TLSv1","TLSv1.2","TLSv1.1"};
	elements(ciphersuites) in {"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
							"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
							"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
							"TLS_RSA_WITH_AES_256_GCM_SHA384",
							"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
							"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
							"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
							"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
							"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
							"TLS_RSA_WITH_AES_128_GCM_SHA256",
							"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
							"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
							"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
							"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
							"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
							"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
							"TLS_RSA_WITH_AES_256_CBC_SHA256",
							"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
							"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
							"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
							"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
							"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
							"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
							"TLS_RSA_WITH_AES_128_CBC_SHA256",
							"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
							"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
							"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
							"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"};
		
ENSURES
	generatedSSLEngine[this];