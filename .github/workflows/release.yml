name: Generate Release Notes

on: push

jobs:
  release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Get latest tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Get merged PRs since the latest tag
        id: get_merged_prs
        run: |
          # Get the latest tag from the environment
          LATEST_TAG=${{ env.LATEST_TAG }}
          echo "Fetching merged PRs since $LATEST_TAG..."

          # Get the list of merged PRs since the latest tag, excluding Dependabot PRs
          git log $LATEST_TAG..HEAD --merges --pretty=format:"%h" > merged_prs.txt

          RELEASE_NOTES="Release Notes:\n\n"
          
          # Iterate over each merge commit hash
          while IFS= read -r commit_hash; do
            # Check if the commit is from Dependabot, skip if it is
            if git log -1 --pretty=format:"%s" $commit_hash | grep -iq "dependabot"; then
              continue
            fi

            # Extract the PR number from the merge commit message
            PR_NUMBER=$(git log -1 --pretty=format:"%s" $commit_hash | grep -oE "#[0-9]+" | head -n 1 | tr -d '#')

            # Get the first comment of the PR
            FIRST_COMMENT=$(gh pr view $PR_NUMBER --json comments --jq '.comments[0].body')

            # Append PR details to the release notes
            if [ -n "$FIRST_COMMENT" ]; then
              RELEASE_NOTES+="- PR #$PR_NUMBER: $FIRST_COMMENT\n"
            fi
          done < merged_prs.txt

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display Release Notes
        run: |
          echo -e "${{ env.RELEASE_NOTES }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: "Release ${{ env.LATEST_TAG }}"
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
