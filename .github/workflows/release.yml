name: Create Release

on:
  workflow_run:
    workflows: ["Deploy CryptoAnalysis"]
    types:
      - completed

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Ensure all tags and history are fetched

    - name: Fetch all tags
      run: git fetch --tags

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests

    - name: Find built JARs
      id: find_jars
      run: |
        CA_JAR=$(ls CryptoAnalysis/build/*.jar | grep -v 'sources\|javadoc' | head -n 1)
        ANDROID_JAR=$(ls CryptoAnalysis-Android/build/*.jar | head -n 1)
        echo "CA_JAR=$CA_JAR" >> $GITHUB_ENV
        echo "ANDROID_JAR=$ANDROID_JAR" >> $GITHUB_ENV
        CA_JAR_BASENAME=$(basename $CA_JAR)
        ANDROID_JAR_BASENAME=$(basename $ANDROID_JAR)
        echo "CA_JAR_BASENAME=$CA_JAR_BASENAME" >> $GITHUB_ENV
        echo "ANDROID_JAR_BASENAME=$ANDROID_JAR_BASENAME" >> $GITHUB_ENV
      shell: bash

    - name: Extract Version from pom.xml
      id: extract_version
      run: |
        VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate Release Notes
      id: generate_notes
      run: |
        LAST_TAG=$(git tag --sort=-creatordate | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found. Listing all merged PR descriptions."
          PRS=$(gh pr list --state merged --json body --jq '.[] | .body')
        else
          echo "Previous tag found: $LAST_TAG"
          PRS=$(gh pr list --state merged --search "is:pr merged:>=$LAST_TAG" --json body --jq '.[] | .body')
        fi
        echo "$PRS" > release_notes.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        name: ${{ env.VERSION }}
        body_path: release_notes.txt
        files: |
          ${{ env.CA_JAR }}
          ${{ env.ANDROID_JAR }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}