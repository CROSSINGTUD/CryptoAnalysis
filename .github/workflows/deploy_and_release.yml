name: Deploy and Release CryptoAnalysis

on: [workflow_dispatch]

env:
  BRANCH_NAME: snapshot_version

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: Deploy
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-package: 'jdk'
          java-version: '17'
          server-id: 'ossrh' # must match the serverId configured for the nexus-staging-maven-plugin
          server-username: OSSRH_USERNAME # Env var that holds your OSSRH user name
          server-password: OSSRH_PASSWORD # Env var that holds your OSSRH user pw
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Substituted with the value stored in the referenced secret
          gpg-passphrase: SIGN_KEY_PASS # Env var that holds the key's passphrase

      - name: Build & Deploy CryptoAnalysis
        run: mvn -B -U clean deploy -Pdeployment -DskipTests
        env:
          SIGN_KEY_PASS: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.SONATYPE_USER }}
          OSSRH_PASSWORD: ${{ secrets.SONATYPE_PW }}

      # Prepare for GitHub release
      - name: Zip JavaCryptographicArchitecture folder
        run: |
          echo "Zipping the JavaCryptographicArchitecture folder..."
          zip -r apps/JavaCryptographicArchitecture.zip CryptoAnalysis/src/test/resources/rules/JavaCryptographicArchitecture

      - name: Copy Examples.jar
        run: cp -r CryptoAnalysisTargets/CogniCryptDemoExample/Examples.jar apps/
        
      - name: Create artefact for released files
        uses: actions/upload-artifact@v4
        with:
          name: released-files
          path: apps/

  snapshot-version:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create branch and update to next SNAPSHOT version
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b ${{ env.BRANCH_NAME }} master
          mvn versions:set versions:commit -DnextSnapshot
          git ls-files | grep 'pom.xml$' | xargs git add
          git commit --allow-empty -am "Update version to next SNAPSHOT"
          git push origin ${{ env.BRANCH_NAME }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR for SNAPSHOT version
        run: |
          gh pr create --draft -B develop -H ${{ env.BRANCH_NAME }} -t "Update to next SNAPSHOT version" -b "Update to next SNAPSHOT version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      # Load the artifact files from the previous build
      - name: Load released files
        uses: actions/download-artifact@v4
        with:
          name: released-files
          path: apps/

      - name: Create GitHub Release
        run: |
          gh release create ${{ env.tag }} ./apps/* --title ${{ env.tag }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: released-files
